var Dungeon={LEVEL:0,healthPack:{heal:100,xp:2},weaponTypes:[{weaponName:"Brass Knuckles",damage:7,xp:5},{weaponName:"Serrated Dagger",damage:12,xp:5},{weaponName:"Katana",damage:16,xp:5},{weaponName:"Reaper's scythe",damage:22,xp:5},{weaponName:"Large Trout",damage:30,xp:5}],Helper:{random:function(t,e){return Math.round(Math.random()*(e-t)+t)},min:function(t,e){return e>t?t:e},max:function(t,e){return t>e?t:e}},Point:function(t,e){this.x=t,this.y=e},Node:function(t){this.value=t,this.lchild=void 0,this.rchild=void 0},Container:function(t,e,n,i){this.x=t,this.y=e,this.width=n,this.height=i,this.center=new Dungeon.Point((n%2!==0?Math.floor(n/2):n/2-1)+t,(i%2!==0?Math.floor(i/2):i/2-1)+e)},Map:function(t,e,n,i){this.floor=i.floor,this.wall=i.wall,this.enemy=i.enemy,this.health=i.health,this.weapon=i.weapon,this.nextlvl=i.nextlvl,this.player=i.player,this.roomlist=n.roomlist,this.corridorlist=n.corridorlist,this.entitylist=n.entitylist,this.terrain=function(n){for(var i=[],o=0;t>o;o++){for(var r=[],h=0;e>h;h++)r.push(n);i.push(r)}return i}(this.wall)},Room:function(t){Dungeon.Helper.min(t.width,t.height)/Dungeon.Helper.max(t.width,t.height)<.45?Dungeon.Helper.max(t.width,t.height)===t.width?(this.height=Dungeon.Helper.random(.5*t.height,t.height),this.y=t.y+Dungeon.Helper.random(0,t.height-this.height),this.width=Math.ceil(this.height/.45),this.x=t.x+Math.floor(t.width/2-this.width/2)):(this.width=Dungeon.Helper.random(.5*t.width,t.width),this.x=t.x+Dungeon.Helper.random(0,t.width-this.width),this.height=Math.ceil(this.width/.45),this.y=t.y+Math.floor(t.height/2-this.height/2)):(this.width=Dungeon.Helper.random(.5*t.width,t.width-2),this.height=Dungeon.Helper.random(.5*t.height,t.height-2),this.x=t.x+Dungeon.Helper.random(1,t.width-2-this.width),this.y=t.y+Dungeon.Helper.random(1,t.height-2-this.height))},Entity:function(t,e){switch(this.x=Dungeon.Helper.random(t.x,t.x+t.width-1),this.y=Dungeon.Helper.random(t.y,t.y+t.height-1),e){case"enemy":this.type=e,this.stats={health:20,attack:12,xp:10};break;case"health":this.type=e,this.stats=Dungeon.healthPack;break;case"weapon":this.type=e,this.stats=Dungeon.weaponTypes[Dungeon.LEVEL];break;case"nextlvl":this.type=e,this.stats=null;break;case"player":this.type=e,this.stats={baseHealth:100,health:20,attack:16,toNextLevel:60};break;default:console.error("new Entity() Invalid type name: ",e)}},growTree:function(t,e){var n=new Dungeon.Node(t),i=t.split();return 0!=e&&(n.lchild=Dungeon.growTree(i[0],e-1),n.rchild=Dungeon.growTree(i[1],e-1)),n},itemPositionIsUnique:function(t,e){for(var n in t)if(t[n].x===e.x&&t[n].y===e.y)return!1;return!0},createEntities:function(t,e){for(var n=Dungeon.Helper.random(0,1),i=0;n>i;i++){do var o=new Dungeon.Entity(e,"enemy");while(!Dungeon.itemPositionIsUnique(t,o));t.push(o)}for(var r=Dungeon.Helper.random(0,1),h=0;r>h;h++){do var a=new Dungeon.Entity(e,"health");while(!Dungeon.itemPositionIsUnique(t,a));t.push(a)}return t},createDungeon:function(t){if(void 0===t.entities.wall||void 0===t.entities.floor)throw new Error("Dungeon.createDungeon() entities object must at least hold 'wall' and 'floor' properties");for(var e=new Dungeon.Container(1,1,t.width-2,t.height-2),n=Dungeon.growTree(e,t.iterations).toArray(),i=n.slice(n.length/2),o=[],r=[],h=[],a=1;a<n.length;a+=2)o.push({start:n[a].center,end:n[a+1].center});for(var s=0;s<i.length;s++){var l=new Dungeon.Room(i[s]);r.push(l)}if(void 0!==t.entities.player){var u=new Dungeon.Entity(r[Dungeon.Helper.random(0,r.length-1)],"player");h.push(u)}if(void 0!==t.entities.nextlvl){var d=new Dungeon.Entity(r[0],"nextlvl");h.push(d)}if(void 0!==t.entities.weapon){var g=new Dungeon.Entity(r[r.length-1],"weapon");h.push(g)}if(void 0!==t.entities.enemy&&void 0!==t.entities.health)for(var p=0;p<r.length;p++)Dungeon.createEntities(h,r[p]);for(var w=new Dungeon.Map(t.height,t.width,{roomlist:r,corridorlist:o,entitylist:h},{wall:t.entities.wall,floor:t.entities.floor,enemy:void 0!==t.entities.enemy?t.entities.enemy:null,health:void 0!==t.entities.health?t.entities.health:null,weapon:void 0!==t.entities.weapon?t.entities.weapon:null,nextlvl:void 0!==t.entities.nextlvl?t.entities.nextlvl:null,player:void 0!==t.entities.player?t.entities.player:null}),y=0;y<o.length;y++)w.drawCorridor(o[y].start,o[y].end);for(var c=0;c<r.length;c++)w.drawRoom(r[c]);for(var f=0;f<h.length;f++)w.drawEntity(h[f]);return w},render:function(t,e){for(var n=document.createElement("table"),i=document.createElement("tbody"),o=0;o<t.terrain.length;o++){for(var r=document.createElement("tr"),h=0;h<t.terrain[o].length;h++){var a=document.createElement("td");t.terrain[o][h]===t.wall&&a.classList.add("wall"),t.terrain[o][h]===t.floor&&a.classList.add("floor"),t.terrain[o][h]===t.enemy&&a.classList.add("enemy"),t.terrain[o][h]===t.health&&a.classList.add("health"),t.terrain[o][h]===t.weapon&&a.classList.add("weapon"),t.terrain[o][h]===t.nextlvl&&a.classList.add("nextlvl"),t.terrain[o][h]===t.player&&a.classList.add("player"),r.appendChild(a)}i.appendChild(r)}n.appendChild(i),e.appendChild(n)}};Dungeon.Node.prototype.toArray=function(t,e){return e=void 0===e?0:e,t=void 0===t?[]:t,void 0!==this.lchild&&this.lchild.toArray(t,2*e+1),t[e]=this.value,void 0!==this.rchild&&this.rchild.toArray(t,2*e+2),t},Dungeon.Container.prototype.split=function(t){t=t||.45;var e,n;return 0===Dungeon.Helper.random(0,1)?(e=new Dungeon.Container(this.x,this.y,Dungeon.Helper.random(this.width*t,this.width*(1-t)),this.height),n=new Dungeon.Container(this.x+e.width,this.y,this.width-e.width,this.height),[e,n]):(e=new Dungeon.Container(this.x,this.y,this.width,Dungeon.Helper.random(this.height*t,this.height*(1-t))),n=new Dungeon.Container(this.x,this.y+e.height,this.width,this.height-e.height),[e,n])},Dungeon.Point.prototype.equals=function(t){if(t instanceof Dungeon.Point)return this.x===t.x&&this.y===t.y;throw new TypeError("Point.equals() argument must be a Point")},Dungeon.Point.prototype.isVerticalTo=function(t){if(t instanceof Dungeon.Point)return this.x===t.x&&this.y!==t.y;throw new TypeError("Point.equals() argument must be a Point")},Dungeon.Point.prototype.isHorizontalTo=function(t){if(t instanceof Dungeon.Point)return this.y===t.y&&this.x!==t.x;throw new TypeError("Point.equals() argument must be a Point")},Dungeon.Map.prototype.drawEntity=function(t){if(!(t instanceof Dungeon.Entity))throw new TypeError("Map.drawEntity() argument must be Entity");this.terrain[t.y][t.x]=this[t.type]},Dungeon.Map.prototype.drawCorridor=function(t,e){if(!(t instanceof Dungeon.Point&&e instanceof Dungeon.Point))throw new TypeError("Map.drawCorridor() arguments must be from Point");if(t.isHorizontalTo(e))for(var n=t.x>e.x?t.x:e.x,i=t.x<e.x?t.x:e.x,o=i;n>=o;o++)this.terrain[t.y][o]=this.floor;else if(t.isVerticalTo(e))for(var n=t.y>e.y?t.y:e.y,i=t.y<e.y?t.y:e.y,r=i;n>=r;r++)this.terrain[r][t.x]=this.floor;else t.equals(e)&&(this.terrain[t.y][t.x]=this.floor)},Dungeon.Map.prototype.drawRoom=function(t){if(!(t instanceof Dungeon.Room))throw new TypeError("Map.drawRoom() argument must be Room");for(var e=t.y;e<t.y+t.height;e++)for(var n=t.x;n<t.x+t.width;n++)this.terrain[e][n]=this.floor};